name: Build and Release JAR

on:
  push:
    branches: [ main, master ]
  release:
    types: [ published ]
  pull_request:
    types: [ closed ]

env:
  JAVA_VERSION: '17'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write  # 添加PR写入权限

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Get project name and version
        id: project-info
        run: |
          # 获取项目名称（使用仓库名称）
          PROJECT_NAME="${{ github.event.repository.name }}"
          
          # 从pom.xml获取版本号
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          
          # 设置输出变量
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Project: $PROJECT_NAME, Version: $VERSION"

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Rename JAR file
        run: |
          # 重命名JAR文件
          OLD_JAR=$(ls target/*.jar | head -1)
          NEW_JAR="target/${{ steps.project-info.outputs.project_name }}-${{ steps.project-info.outputs.version }}.jar"
          mv "$OLD_JAR" "$NEW_JAR"
          echo "Renamed JAR file: $OLD_JAR -> $NEW_JAR"
          ls -la target/*.jar

      - name: Create GitHub Release
        # 只在push到main/master分支或发布时创建Release
        if: github.event_name == 'push' || github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.project-info.outputs.version }}-${{ github.run_number }}
          name: ${{ steps.project-info.outputs.project_name }} v${{ steps.project-info.outputs.version }}  # 修正：使用name而不是release_name
          body: |
            Automated release of ${{ steps.project-info.outputs.project_name }}
            
            - **Version**: ${{ steps.project-info.outputs.version }}
            - **Commit**: ${{ github.sha }}
            - **Build Date**: ${{ steps.date.outputs.date }}
            - **Run Number**: ${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            target/${{ steps.project-info.outputs.project_name }}-*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add PR Description for Merged PR
        # 只在PR合并时执行
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const version = '${{ steps.project-info.outputs.version }}';
            const projectName = '${{ steps.project-info.outputs.project_name }}';
            const buildDate = '${{ steps.date.outputs.date }}';
            const runNumber = '${{ github.run_number }}';
            const commitSha = '${{ github.sha }}';
            
            // 获取现有的PR描述
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });
            
            const buildInfo = `
            ## 🏗️ 构建信息
            | 项目 | 版本 | 构建日期 | 构建编号 | 提交哈希 |
            |------|------|----------|----------|----------|
            | ${projectName} | ${version} | ${buildDate} | ${runNumber} | ${commitSha.substring(0, 7)} |
            
            ### 📦 构建产物
            - **JAR文件**: \`${projectName}-${version}.jar\`
            - **构建状态**: ✅ 成功
            - **触发事件**: PR合并
            `;
            
            // 合并原有的PR描述和构建信息
            const newBody = pr.body + '\n\n' + buildInfo;
            
            // 更新PR描述
            await github.rest.pulls.update({
              owner,
              repo,
              pull_number: prNumber,
              body: newBody
            });
            
            console.log('成功更新PR描述');